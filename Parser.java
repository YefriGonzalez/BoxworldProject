
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.yefrig.boxworldserver.parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\005\000\002\011\005\000\002\010\005\000\002\012" +
    "\006\000\002\004\005\000\002\004\004\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\016\003\000\002\016\005\000\002\016\006\000\002\016" +
    "\006\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\014\006\000\002" +
    "\015\007\000\002\015\006\000\002\020\005\000\002\020" +
    "\003\000\002\021\005\000\002\021\006\000\002\022\006" +
    "\000\002\023\007\000\002\023\006\000\002\024\006\000" +
    "\002\025\007\000\002\025\006\000\002\026\007\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\034\005\001\002\000\004\002\224\001" +
    "\002\000\022\006\010\007\017\010\020\011\026\021\023" +
    "\025\021\026\015\027\006\001\002\000\004\051\220\001" +
    "\002\000\006\035\216\052\215\001\002\000\004\051\213" +
    "\001\002\000\006\035\ufff8\052\ufff8\001\002\000\006\035" +
    "\ufff9\052\ufff9\001\002\000\006\035\ufffc\052\ufffc\001\002" +
    "\000\006\035\ufffb\052\ufffb\001\002\000\004\051\202\001" +
    "\002\000\006\035\ufff6\052\ufff6\001\002\000\004\051\200" +
    "\001\002\000\004\051\176\001\002\000\004\051\165\001" +
    "\002\000\004\002\001\001\002\000\004\051\102\001\002" +
    "\000\006\035\ufff7\052\ufff7\001\002\000\006\035\ufffa\052" +
    "\ufffa\001\002\000\004\051\030\001\002\000\006\035\ufffd" +
    "\052\ufffd\001\002\000\004\034\031\001\002\000\020\012" +
    "\034\013\032\014\033\015\042\016\036\017\041\020\035" +
    "\001\002\000\004\051\076\001\002\000\004\051\072\001" +
    "\002\000\004\051\066\001\002\000\004\051\062\001\002" +
    "\000\004\051\056\001\002\000\006\035\054\052\053\001" +
    "\002\000\006\035\ufff2\052\ufff2\001\002\000\004\051\047" +
    "\001\002\000\004\051\043\001\002\000\004\050\044\001" +
    "\002\000\004\047\045\001\002\000\004\050\046\001\002" +
    "\000\006\035\uffec\052\uffec\001\002\000\004\050\050\001" +
    "\002\000\004\047\051\001\002\000\004\050\052\001\002" +
    "\000\006\035\uffea\052\uffea\001\002\000\020\012\034\013" +
    "\032\014\033\015\042\016\036\017\041\020\035\001\002" +
    "\000\006\035\ufff0\052\ufff0\001\002\000\006\035\ufff1\052" +
    "\ufff1\001\002\000\004\050\057\001\002\000\004\047\060" +
    "\001\002\000\004\050\061\001\002\000\006\035\uffeb\052" +
    "\uffeb\001\002\000\004\050\063\001\002\000\004\047\064" +
    "\001\002\000\004\050\065\001\002\000\006\035\uffe9\052" +
    "\uffe9\001\002\000\004\050\067\001\002\000\004\047\070" +
    "\001\002\000\004\050\071\001\002\000\006\035\uffef\052" +
    "\uffef\001\002\000\004\050\073\001\002\000\004\047\074" +
    "\001\002\000\004\050\075\001\002\000\006\035\uffed\052" +
    "\uffed\001\002\000\004\050\077\001\002\000\004\047\100" +
    "\001\002\000\004\050\101\001\002\000\006\035\uffee\052" +
    "\uffee\001\002\000\004\030\103\001\002\000\004\034\105" +
    "\001\002\000\006\035\uffdc\052\uffdc\001\002\000\010\022" +
    "\112\023\110\024\115\001\002\000\006\035\uffce\052\uffce" +
    "\001\002\000\004\035\161\001\002\000\004\051\157\001" +
    "\002\000\006\035\uffcc\052\uffcc\001\002\000\004\051\123" +
    "\001\002\000\006\035\uffd8\052\121\001\002\000\006\035" +
    "\uffcd\052\uffcd\001\002\000\004\051\116\001\002\000\004" +
    "\004\117\001\002\000\010\005\120\035\uffd7\052\uffd7\001" +
    "\002\000\006\035\uffd6\052\uffd6\001\002\000\010\022\112" +
    "\023\110\024\115\001\002\000\004\035\uffd9\001\002\000" +
    "\016\032\134\036\126\037\124\040\125\041\133\050\130" +
    "\001\002\000\022\033\uffdd\035\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\050\uffdd\052\uffdd\001\002\000\004\032\154" +
    "\001\002\000\022\033\uffde\035\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\050\uffde\052\uffde\001\002\000\006\035\uffcb" +
    "\052\uffcb\001\002\000\010\032\134\036\126\037\124\001" +
    "\002\000\016\035\uffe8\043\141\044\137\045\136\046\142" +
    "\052\uffe8\001\002\000\022\033\uffe0\035\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\050\uffe0\052\uffe0\001\002\000\004" +
    "\032\147\001\002\000\010\032\134\036\126\037\124\001" +
    "\002\000\014\033\140\043\141\044\137\045\136\046\142" +
    "\001\002\000\010\032\134\036\126\037\124\001\002\000" +
    "\010\032\134\036\126\037\124\001\002\000\022\033\uffdf" +
    "\035\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\050\uffdf\052" +
    "\uffdf\001\002\000\010\032\134\036\126\037\124\001\002" +
    "\000\010\032\134\036\126\037\124\001\002\000\022\033" +
    "\uffe3\035\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\050\uffe3" +
    "\052\uffe3\001\002\000\022\033\uffe2\035\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\050\uffe2\052\uffe2\001\002\000\022" +
    "\033\uffe1\035\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\050" +
    "\uffe1\052\uffe1\001\002\000\022\033\uffe4\035\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\050\uffe4\052\uffe4\001\002\000" +
    "\010\032\134\036\126\037\124\001\002\000\014\033\151" +
    "\043\141\044\137\045\136\046\142\001\002\000\006\035" +
    "\uffe5\052\uffe5\001\002\000\014\043\141\044\137\045\136" +
    "\046\142\050\153\001\002\000\006\035\uffe7\052\uffe7\001" +
    "\002\000\010\032\134\036\126\037\124\001\002\000\014" +
    "\033\156\043\141\044\137\045\136\046\142\001\002\000" +
    "\006\035\uffe6\052\uffe6\001\002\000\016\032\134\036\126" +
    "\037\124\040\125\041\133\050\130\001\002\000\006\035" +
    "\uffca\052\uffca\001\002\000\006\031\163\052\162\001\002" +
    "\000\004\034\105\001\002\000\006\035\uffda\052\uffda\001" +
    "\002\000\006\035\uffdb\052\uffdb\001\002\000\004\030\166" +
    "\001\002\000\004\034\170\001\002\000\006\035\uffd5\052" +
    "\uffd5\001\002\000\010\022\112\023\110\024\115\001\002" +
    "\000\004\035\172\001\002\000\006\031\174\052\173\001" +
    "\002\000\004\034\170\001\002\000\006\035\uffd3\052\uffd3" +
    "\001\002\000\006\035\uffd4\052\uffd4\001\002\000\016\032" +
    "\134\036\126\037\124\040\125\041\133\050\130\001\002" +
    "\000\006\035\ufff3\052\ufff3\001\002\000\016\032\134\036" +
    "\126\037\124\040\125\041\133\050\130\001\002\000\006" +
    "\035\ufff4\052\ufff4\001\002\000\004\030\203\001\002\000" +
    "\004\034\205\001\002\000\006\035\uffd2\052\uffd2\001\002" +
    "\000\010\022\112\023\110\024\115\001\002\000\004\035" +
    "\207\001\002\000\006\031\211\052\210\001\002\000\004" +
    "\034\205\001\002\000\006\035\uffd0\052\uffd0\001\002\000" +
    "\006\035\uffd1\052\uffd1\001\002\000\004\042\214\001\002" +
    "\000\006\035\ufff5\052\ufff5\001\002\000\022\006\010\007" +
    "\017\010\020\011\026\021\023\025\021\026\015\027\006" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\004\034\221\001\002\000\010\022\112\023\110" +
    "\024\115\001\002\000\004\035\223\001\002\000\006\035" +
    "\uffcf\052\uffcf\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\003\001\001\000\002\001\001\000" +
    "\026\003\021\005\006\006\026\010\013\011\012\012\024" +
    "\014\011\022\010\024\023\026\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\037\013" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\054\013\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\103\001\001\000\002\001\001\000" +
    "\014\020\106\021\110\027\112\030\105\031\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\121\021\110\027\112" +
    "\030\105\031\113\001\001\000\002\001\001\000\010\007" +
    "\130\016\126\017\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\151\017\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\134\017\131\001\001\000" +
    "\002\001\001\000\004\017\145\001\001\000\004\017\144" +
    "\001\001\000\002\001\001\000\004\017\143\001\001\000" +
    "\004\017\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\147\017" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\154\017\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\130" +
    "\016\157\017\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\166\001\001\000" +
    "\002\001\001\000\014\020\170\021\110\027\112\030\105" +
    "\031\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\130\016\176\017\131\001\001\000\002\001" +
    "\001\000\010\007\130\016\200\017\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\203\001\001\000" +
    "\002\001\001\000\014\020\205\021\110\027\112\030\105" +
    "\031\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\216\005" +
    "\006\006\026\010\013\011\012\012\024\014\011\022\010" +
    "\024\023\026\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\221\021\110\027\112" +
    "\030\105\031\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private int posX;
    private int posY;
    private String type;
    private ArrayList<Board> boards;
    private ArrayList<Box> boxes;
    private ArrayList<Target> targets;
    //Banderas para validar la repeticion de datos
    private boolean boxColor;
    private boolean boxOnTargetColor;
    private boolean targetColor;
    private boolean brickColor;
    private boolean hallColor;
    private boolean undefinedColor;
    private boolean playerColor;
    private boolean nameTablero;
    private boolean rowTablero;
    private boolean colTablero;
    private boolean player;
    private boolean config;

    //Objeto tablero
    private Tablero tablero = new Tablero();

    public Parser(Lexer lexer){
		super(lexer);
        this.boards=new ArrayList<Board>();
        this.boxes=new ArrayList<Box>();
        this.boxColor=false;
        this.boxOnTargetColor=false;
        this.targetColor=false;
        this.brickColor=false;
        this.hallColor=false;
        this.undefinedColor=false;
        this.playerColor=false;
        this.nameTablero=false;
        this.rowTablero=false;
        this.colTablero=false;
        this.player=false;
        this.config=false;
	}
    //Board atributes
   
    private void addBoard(){
        if(this.posX!=-1 && this.posY!=-1 && this.type!=""){
            Board board=new Board(this.posX,this.posY,this.type);
            boards.add(board);
            resetPosition();
            this.type="";
        } else{

        }
    }
    //Metodo que se ejecuta cuando se termino de insertar los boards
    private void sendBoard(){
        this.tablero.setBoards(this.boards);
    }

    private void addBox(){
        if(this.posX!=-1 && this.posY!=-1){
            Box box=new Box(this.posX,this.posY);
            boxes.add(box);
            resetPosition();
        } else {

        }
    }

    private void sendBoxes(){
        this.tablero.setBoxes(this.boxes);
    }
    
    private void addTarget(){
        if(this.posX!=-1 && this.posY!=-1){
            Target target=new Target(this.posX,this.posY);
            targets.add(target);
            resetPosition();
        } else {

        }
    }

    private void sendTargets(){
        this.tablero.setTargets(this.targets);
    }

    private void addPlayer(){
       if(this.posX!=-1 && this.posY!=-1){
            Player player=new Player(this.posX,this.posY);
            this.tablero.setPlayer(player);
            this.player=true;
            resetPosition();
       } else {

       }
    }
    
    private void resetPosition(){
        this.posX=-1;
        this.posY=-1;
    }
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + ParserSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserSym.EOF) {
        	System.out.println("public void unrecoveredsyntax_error");
        }
    }
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // a ::= LLAVE_A b 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= tablero COMA b 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // b ::= tablero LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tablero ::= name 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tablero ::= rows 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tablero ::= cols 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tablero ::= config 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tablero ::= board 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tablero ::= boxes 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tablero ::= targets 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tablero ::= player 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tablero",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // name ::= NAME DOSPUNTOS NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(!player){
            tablero.setName(nombre.toString().replaceAll("\"",""));
            player=true;
        } else{

        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rows ::= ROWS DOSPUNTOS numero 
            {
              Object RESULT =null;
		int rowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object row = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(!rowTablero){
            tablero.setRows(Integer.valueOf(row.toString().replaceAll("\"","")));
            rowTablero=true;
        } else{

        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rows",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cols ::= COLS DOSPUNTOS numero 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(!colTablero){
            tablero.setCols(Integer.valueOf(col.toString().replaceAll("\"","")));
        } else {

        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cols",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // config ::= CONFIG DOSPUNTOS LLAVE_A c 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c ::= configs COMA c 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c ::= configs LLAVE_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // configs ::= BOX_COLOR DOSPUNTOS COMILLAS COLOR COMILLAS 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(!boxColor){
                tablero.setBoxColor(color.toString().replaceAll("\"",""));
                boxColor=true;
            }else{

            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // configs ::= BOX_ON_TARGET_COLOR DOSPUNTOS COMILLAS COLOR COMILLAS 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(!boxOnTargetColor){
                tablero.setBoxOnTargetColor(color.toString().replaceAll("\"",""));
                boxOnTargetColor=true;
            }else{

            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // configs ::= TARGET_COLOR DOSPUNTOS COMILLAS COLOR COMILLAS 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(!targetColor){
                tablero.setTargetColor(color.toString().replaceAll("\"",""));
                targetColor=true;
            } else{

            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // configs ::= BRICK_COLOR DOSPUNTOS COMILLAS COLOR COMILLAS 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(!brickColor){
                tablero.setBrickColor(color.toString().replaceAll("\"",""));
                brickColor=true;
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // configs ::= HALL_COLOR DOSPUNTOS COMILLAS COLOR COMILLAS 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(!hallColor){
                tablero.setHallColor(color.toString().replaceAll("\"",""));
                hallColor=true;
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // configs ::= UNDEFINED_COLOR DOSPUNTOS COMILLAS COLOR COMILLAS 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(!undefinedColor){
                tablero.setUndefinedColor(color.toString().replaceAll("\"",""));
                undefinedColor=true;
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // configs ::= PLAYER_COLOR DOSPUNTOS COMILLAS COLOR COMILLAS 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(!playerColor){
                tablero.setPlayerColor(color.toString().replaceAll("\"",""));
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("configs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numero ::= operacion 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=num1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numero ::= COMILLAS operacion COMILLAS 
            {
              Object RESULT =null;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=num2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numero ::= FLOOR PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int num3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT=Math.floor((double)num3);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numero ::= CEIL PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int num4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Math.ceil((double)num4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion ::= operacion MULTIPLICACION x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=(double)num * (double)num2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion ::= operacion DIVISION x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=(double)num / (double)num2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion ::= operacion SUMA x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=(double)num + (double)num2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= operacion RESTA x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=(double)num-(double)num2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion ::= x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=num;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // x ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=num;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("x",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // x ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=entero;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("x",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // x ::= DECIMAL 
            {
              Object RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=decimal;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("x",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // board ::= BOARD DOSPUNTOS CORCHETE_A boards 
            {
              Object RESULT =null;
		sendBoard();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("board",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boards ::= LLAVE_A contentPosition LLAVE_C COMA boards 
            {
              Object RESULT =null;
		addBoard();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boards",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boards ::= LLAVE_A contentPosition LLAVE_C CORCHETE_C 
            {
              Object RESULT =null;
		addBoard();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boards",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contentPosition ::= posiciones COMA contentPosition 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contentPosition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contentPosition ::= posiciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contentPosition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= TYPE DOSPUNTOS BRICK 
            {
              Object RESULT =null;
		RESULT="BRICK";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= TYPE DOSPUNTOS BRICK HALL 
            {
              Object RESULT =null;
		RESULT="HALL";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boxes ::= BOXES DOSPUNTOS CORCHETE_A box 
            {
              Object RESULT =null;
		sendBoxes();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boxes",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // box ::= LLAVE_A contentPosition LLAVE_C COMA box 
            {
              Object RESULT =null;
		addBox();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("box",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // box ::= LLAVE_A contentPosition LLAVE_C CORCHETE_C 
            {
              Object RESULT =null;
		addBox();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("box",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // targets ::= TARGETS DOSPUNTOS CORCHETE_A target 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("targets",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // target ::= LLAVE_A contentPosition LLAVE_C COMA target 
            {
              Object RESULT =null;
		addTarget();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("target",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // target ::= LLAVE_A contentPosition LLAVE_C CORCHETE_C 
            {
              Object RESULT =null;
		addTarget();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("target",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // player ::= PLAYER DOSPUNTOS LLAVE_A contentPosition LLAVE_C 
            {
              Object RESULT =null;
		
        if(!player){
            addPlayer();
        } else {

        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("player",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // posiciones ::= posx 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(posX==-1){
            posX=Integer.valueOf(x.toString().replaceAll("\"",""));
        } else{

        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("posiciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // posiciones ::= posy 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(posY==-1){
            posY=Integer.valueOf(y.toString().replaceAll("\"",""));
        } else{ 

        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("posiciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // posiciones ::= type 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(type==""){
            type=tipo.toString().replaceAll("\"","");
        } else{

        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("posiciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // posx ::= POSX DOSPUNTOS numero 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("posx",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // posy ::= POSY DOSPUNTOS numero 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=y;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("posy",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
