package com.yefrig.boxworldserver.parser;
import java_cup.runtime.*;
import java.util.ArrayList;
import com.yefrig.boxworldserver.tab.Target;
import com.yefrig.boxworldserver.tab.Box;
import com.yefrig.boxworldserver.tab.Tablero;
import com.yefrig.boxworldserver.tab.Board;
import com.yefrig.boxworldserver.tab.Player;

class Parser;
parser code{:
    
    private ArrayList<Board> boards;
    private ArrayList<Box> boxes;
    private ArrayList<Target> targets;
    private Player player;
    private String world;
    private String worlds;
    //Banderas para validar la repeticion de datos
    private boolean boxColor;
    private boolean boxOnTargetColor;
    private boolean targetColor;
    private boolean brickColor;
    private boolean hallColor;
    private boolean undefinedColor;
    private boolean playerColor;
    private boolean nameTablero;
    private boolean rowTablero;
    private boolean colTablero;
    private boolean playerBoolean;
    private boolean name;
    private boolean row;
    private boolean col;
    private ArrayList<ErrorObject> errors;
    private ArrayList<ErrorObject> errorsSemantic;
    //Objeto tablero
    private Tablero tablero = new Tablero();

    public Parser(Lexer lexer){
		super(lexer);
        this.boards=new ArrayList<Board>();
        this.errors=new ArrayList<>();
        this.errorsSemantic=new ArrayList<>();
        this.boxes=new ArrayList<Box>();
        this.targets=new ArrayList<Target>();
        this.boxColor=false;
        this.boxOnTargetColor=false;
        this.targetColor=false;
        this.brickColor=false;
        this.hallColor=false;
        this.undefinedColor=false;
        this.playerColor=false;
        this.nameTablero=false;
        this.rowTablero=false;
        this.colTablero=false;
        this.playerBoolean=false;
        this.col=false;
        this.row=false;
        this.name=false;
        this.worlds="";
        this.world="";
	}

    @Override
    public Symbol scan() throws Exception{
        Symbol sym=this.getScanner().next_token();
        if(sym==null){
            return this.getSymbolFactory().newSymbol("END OND FILE",this.EOF_sym());
        }

        while(sym!=null && sym.sym==ParserSym.ERROR){
            this.report_expected_token_ids();
            errors.add(new ErrorObject(sym.value.toString(), sym.left,sym.right, TypeError.LEXICO,"Token incorrecto"));
            System.out.println("Ingorando: " + sym.value.toString());
            sym = this.getScanner().next_token();
        }
         if (sym == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
        }

        return sym;
    }
    public String getWorlds(){
        return this.worlds;
    }

    public String getWorld(){
        return this.world;
    }
    public boolean getName(){
        return this.name;
    }

    public boolean getRow(){
        return this.row;
    }

    public boolean getCol(){
        return this.col;
    }

    public ArrayList<Board> getBoards(){
        return this.boards;
    }
    public ArrayList<Box> getBoxes(){
        return this.boxes;
    }
    public ArrayList<Target> getTargets(){
        return this.targets;
    }
    public ArrayList<ErrorObject> getErrors(){
        return this.errors;
    }

    public ArrayList<ErrorObject> getErrorsSemantic(){
        return this.errorsSemantic;
    }
    public Tablero getTablero(){
        return this.tablero;
    }

    public Player getPlayer(){
        return this.player;
    }

    private void addName(String text){
        if(!this.name){
            this.tablero.setName(text);
            this.name=true;
        } else {
            errorsSemantic.add(new ErrorObject("NAME",TypeError.SEMANTICO,"Nombre esta repetido"));
        }
        
    }
    private void addRows(String row){
        double rows=Double.parseDouble(row);
        double mod=rows%1;
        if(!this.row){
            if(mod==0){
                if((int)rows>=0 ){
                    this.tablero.setRows((int)rows); 
                } else {
                    errorsSemantic.add(new ErrorObject("ROW",TypeError.SEMANTICO,"Row es negativo "));
                }
            } else {
                errorsSemantic.add(new ErrorObject("ROW",TypeError.SEMANTICO,"Row es decimal"));
                System.out.println("ERROR, rows no puede ser decimal: "+rows);
            }
            this.row=true;
        } else {
            errorsSemantic.add(new ErrorObject("ROW",TypeError.SEMANTICO,"ROW esta repetido"));
        }
    }
    private void addColumns(String col){
        double cols=Double.parseDouble(col);
        double mod=cols%1;
        if(!this.col){
            if(mod==0){
                if((int)cols>=0){
                    this.tablero.setCols((int)cols);
                    this.col=true;
                } else {
                    errorsSemantic.add(new ErrorObject("COL",TypeError.SEMANTICO,"COL es negativo"));
                    System.out.println("ERROR, cols no puede ser negativo: "+cols); 
                }
            } else {
                errorsSemantic.add(new ErrorObject("ROW",TypeError.SEMANTICO,"COL es decimal"));
                System.out.println("ERROR, rows no puede ser decimal: "+cols);
            }
        } else {
            errorsSemantic.add(new ErrorObject("ROW",TypeError.SEMANTICO,"Row esta repetido"));
        }
        
    }
    private void addBoard(ArrayList<String> data){
        double x=-1;
        double y=-1;
        String type="";
        if(data.size()>3){
            errorsSemantic.add(new ErrorObject("BOARD",TypeError.SEMANTICO,"Hay datos repetidos en: "+data));
        } else if(data.size()==3){
            for (int i = 0; i < data.size(); i++) {
                String[] str=data.get(i).split(":");   
                if(str[0].equals("y")){
                    y=Double.parseDouble(str[1]);
                } else if (str[0].equals("x")){
                    x=Double.parseDouble(str[1]);
                } else if(str[0].equals("tipo")){
                    type=str[1];
                }
            }
            double modx=x%1;
            double mody=y%1;
            if(modx==0 && mody==0){
                if(type!="" && (int)x>=0 && (int)y>=0){
                    Board board=new Board((int)x,(int)y,type);
                    boards.add(board);
                }else {
                    errorsSemantic.add(new ErrorObject("BOARD",TypeError.SEMANTICO,"BOARD debe tener x,y,tipo y unicamente contiente: "+data));
                }
            } else {
                errorsSemantic.add(new ErrorObject("BOARD",TypeError.SEMANTICO,"X y Y no pueden ser decimales: "+data));
            }   
        } 
    }

    private void addBox(ArrayList<String> data){
        double x=-1;
        double y=-1;
       
        if (data.size()>2) {
            errorsSemantic.add(new ErrorObject("BOX",TypeError.SEMANTICO,"Hay datos repetidos en: "+data));
        } else if(data.size()==2) {
            for (int i = 0; i < data.size(); i++) {
                String[] str=data.get(i).split(":");
                if(str[0].equals("y")){
                    y=Double.parseDouble(str[1]);
                } else if (str[0].equals("x")){
                    x=Double.parseDouble(str[1]);
                }
            }
            double modx=x%1;
            double mody=y%1;
            if(modx==0 && mody==0){
                if((int)x>=0 && (int)y>=0){
                    Box box=new Box((int)x,(int)y);
                    boxes.add(box);
                } else {
                    errorsSemantic.add(new ErrorObject("BOX",TypeError.SEMANTICO,"BOX debe tener x,y y unicamente contiente: "+data));
                }
            } else {
               errorsSemantic.add(new ErrorObject("BOX",TypeError.SEMANTICO,"X y Y no pueden ser decimales: "+data));
            }
            
        }
    }

    private void addTarget(ArrayList<String> data){
        double x=-1;
        double y=-1;
        if (data.size()>2) {
            errorsSemantic.add(new ErrorObject("TARGET",TypeError.SEMANTICO,"Hay datos repetidos en: "+data));
        } else if(data.size()==2){
            for (int i = 0; i < data.size(); i++) {
                String[] str=data.get(i).split(":");
                if(str[0].equals("y")){
                    y=Double.parseDouble(str[1]);
                } else if (str[0].equals("x")){
                    x=Double.parseDouble(str[1]);
                }
            }
            double modx=x%1;
            double mody=y%1;
            if(modx==0 && mody==0){
                if((int)x>=0 && (int)y>=0){
                    Target target=new Target((int)x,(int)y);
                    targets.add(target);
                }else {
                    errorsSemantic.add(new ErrorObject("TARGET",TypeError.SEMANTICO,"TARGET debe tener x,y y unicamente contiente: "+data));
                }
            } else {
                errorsSemantic.add(new ErrorObject("TARGET",TypeError.SEMANTICO,"X y Y no pueden ser decimales: "+data));
            }
            
        }
    }

    private void addPlayer(ArrayList<String> data){
        double x=-1;
        double y=-1;
        if(!this.playerBoolean){
            this.playerBoolean=true;
            if (data.size()>2) {
                errorsSemantic.add(new ErrorObject("PLAYER",TypeError.SEMANTICO,"Hay datos repetidos en: "+data));
            } else if(data.size()==2) {
                for (int i = 0; i < data.size(); i++) {
                    String[] str=data.get(i).split(":");
                    if(str[0].equals("y")){
                        y=Double.parseDouble(str[1]);
                    } else if (str[0].equals("x")){
                        x=Double.parseDouble(str[1]);
                    }
                }
                double modx=x%1;
                double mody=y%1;
                if(modx==0 && mody==0){
                    if((int)x>=0 && (int)y>=0){
                        player=new Player((int)x,(int)y);
                    } else {
                        errorsSemantic.add(new ErrorObject("PLAYER",TypeError.SEMANTICO,"PLAYER debe tener x,y y unicamente contiente: "+data));
                    }
                } else {
                    errorsSemantic.add(new ErrorObject("PLAYER",TypeError.SEMANTICO,"X y Y no pueden ser decimales: "+data));
                }      
            }
        } else {
            errorsSemantic.add(new ErrorObject("PLAYER",TypeError.SEMANTICO,"Player esta repetido"));
        }
        
    }
    private void addTargetColor(String color){
        if(!this.targetColor){
            this.targetColor=true;
            tablero.setTargetColor(color);
        } else {
            errorsSemantic.add(new ErrorObject("TARGET_COLOR",TypeError.SEMANTICO,"Esta repetido"));
        }
    }

    private void addBrickColor(String color){
        if(!this.brickColor){
            this.brickColor=true;
            tablero.setBrickColor(color);
        } else {
            errorsSemantic.add(new ErrorObject("BRICK_COLOR",TypeError.SEMANTICO,"Esta repetido"));
        }
    }
    private void addBoxOnTargetColor(String color){
        if(!this.boxOnTargetColor){
            this.boxOnTargetColor=true;
            tablero.setBoxOnTargetColor(color);
        } else {
            errorsSemantic.add(new ErrorObject("BOX_ON_TARGET_COLOR",TypeError.SEMANTICO,"Esta repetido"));
        }
        
    }
    private void addBoxColor(String color){
        if(!this.boxColor){
            this.boxColor=true;
            tablero.setBoxColor(color);    
        } else {
            errorsSemantic.add(new ErrorObject("BOX_COLOR",TypeError.SEMANTICO,"Esta repetido"));
        }
    }

    private void addHallColor(String color){
        if(!this.hallColor){
            this.hallColor=true;
            tablero.setHallColor(color);
        } else {
            errorsSemantic.add(new ErrorObject("HALL_COLOR",TypeError.SEMANTICO,"Esta repetido"));
        }
    }

    private void addUndefinedColor(String color){
        if(!this.undefinedColor){
            this.undefinedColor=true;
            tablero.setUndefinedColor(color);
        } else {
            errorsSemantic.add(new ErrorObject("UNDEFINED_COLOR",TypeError.SEMANTICO,"Esta repetido"));
        }
    }

    private void addPlayerColor(String color){
        if(!this.playerColor){
            this.playerColor=true;
            tablero.setPlayerColor(color);
        } else {
            errorsSemantic.add(new ErrorObject("PLAYER_COLOR",TypeError.SEMANTICO,"Esta repetido"));
        }
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(java_cup.runtime.Symbol cur_token){
        errors.add(new ErrorObject(cur_token.value.toString(), cur_token.left,cur_token.right, TypeError.SINTACTICO,"Error sintactico: "));
        System.out.println("Error en"+ cur_token.value.toString());
    }

    /*  public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + ParserSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }*/

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == ParserSym.EOF) {
        	System.out.println("public void unrecoveredsyntax_error");
        }
    }
	
:};


//Seccion de terminales
terminal BRICK,HALL,NAME,ROWS,COLS,CONFIG,BOX_COLOR,BOX_ON_TARGET_COLOR,TARGET_COLOR,BRICK_COLOR,
HALL_COLOR,UNDEFINED_COLOR,PLAYER_COLOR,BOARD,POSX,POSY,TYPE,BOXES,TARGETS,PLAYER,CORCHETE_A,CORCHETE_C,
PARENTESIS_A,PARENTESIS_C,LLAVE_A,LLAVE_C,FLOOR,CEIL,NOMBRE,SUMA,RESTA,WORLD,WORLDS,
MULTIPLICACION,DIVISION,ENTERO,DECIMAL,COLOR,COMILLAS,ALL,DOSPUNTOS,COMA,ERROR;

//Seccion de no terminales
non terminal a,ws,w,b,c,tablero,name,operacion,cols,rows,config,configs,board,boards,numero,x,
type,boxes,box,targets,target,player,xpos,ypos;
non terminal String posiciones;
non terminal ArrayList<String> contentBoard, contentBox,contentTarget,contentPlayer;
//Gramaticas
a::= LLAVE_A b;

b::= tablero COMA b
    | tablero LLAVE_C
    | w
    | ws
    ;

ws::= WORLDS DOSPUNTOS ALL LLAVE_C {:worlds="ALL";:};

w::= WORLD DOSPUNTOS NOMBRE:n LLAVE_C {:world=n.toString().replaceAll("\"","");:};


tablero::= name {::}
    |rows {::}
    |cols  {::}
    |config {::}
    |boards {::}
    |boxes {::}
    |targets {::}
    |player {::}
    ;


name::=NAME DOSPUNTOS NOMBRE:nombre 
        {:
            addName(nombre.toString().replaceAll("\"",""));
            RESULT=nombre.toString().replaceAll("\"","");
        :}
    ;

rows::= ROWS DOSPUNTOS numero:row {:
        addRows(row.toString());
        :}
    ;

cols::=COLS DOSPUNTOS numero:col {:
        addColumns(col.toString());
        :}
    ;

config::=CONFIG DOSPUNTOS LLAVE_A c {::};

c::= configs COMA c {::}
    | configs LLAVE_C {::}
    ;

configs::= BOX_COLOR DOSPUNTOS  COMILLAS COLOR:color COMILLAS {:
                addBoxColor(color.toString().replaceAll("\"",""));
            :}
    | BOX_ON_TARGET_COLOR DOSPUNTOS COMILLAS COLOR:color COMILLAS {:
                addBoxOnTargetColor(color.toString().replaceAll("\"",""));
            :}
    | TARGET_COLOR DOSPUNTOS COMILLAS COLOR:color COMILLAS {:
                addTargetColor(color.toString().replaceAll("\"",""));
            :}
    | BRICK_COLOR DOSPUNTOS COMILLAS COLOR:color COMILLAS {:
                addBrickColor(color.toString().replaceAll("\"",""));
            :}
    | HALL_COLOR DOSPUNTOS COMILLAS COLOR:color COMILLAS  {:
                addHallColor(color.toString().replaceAll("\"",""));
            :}
    | UNDEFINED_COLOR DOSPUNTOS COMILLAS COLOR:color COMILLAS {:
                addUndefinedColor(color.toString().replaceAll("\"",""));
            :}
    | PLAYER_COLOR DOSPUNTOS COMILLAS COLOR:color COMILLAS  {:
                addPlayerColor(color.toString().replaceAll("\"",""));
            :}
    ;

boards::=BOARD DOSPUNTOS CORCHETE_A board CORCHETE_C {::};

board::= LLAVE_A contentBoard:content LLAVE_C COMA board {:addBoard(content);:}
    |LLAVE_A  contentBoard:content LLAVE_C  {: addBoard(content);:}
    ;

contentBoard::=contentBoard:arreglo COMA posiciones:pos   {:arreglo.add(pos);RESULT=arreglo;:}
    | posiciones:pos {:RESULT=new ArrayList<String>();RESULT.add(pos);:} 
    ;


boxes::=BOXES DOSPUNTOS CORCHETE_A box CORCHETE_C{::};

box::=LLAVE_A contentBox:content LLAVE_C COMA box {:addBox(content);:}
    | LLAVE_A contentBox:content LLAVE_C  {:addBox(content);:}
    ;

contentBox::=contentBox:arreglo COMA posiciones:pos {:arreglo.add(pos); RESULT=arreglo;:}
    | posiciones:pos {:RESULT=new ArrayList<String>();
        RESULT.add(pos);:} 
    ;

targets::=TARGETS DOSPUNTOS CORCHETE_A target  CORCHETE_C {: :};

target::=LLAVE_A contentTarget:content LLAVE_C COMA target {:addTarget(content);:}
    |LLAVE_A contentTarget:content LLAVE_C  {:addTarget(content);:}
    ;

contentTarget::=contentTarget:arreglo COMA posiciones:pos   {:arreglo.add(pos); RESULT=arreglo;:}
    | posiciones:pos {:RESULT=new ArrayList<String>();
        RESULT.add(pos);:} 
    ;

player::= PLAYER DOSPUNTOS LLAVE_A  contentPlayer:content LLAVE_C {:
        addPlayer(content);
    :}
    ;
contentPlayer::=contentPlayer:arreglo COMA posiciones:pos   {:arreglo.add(pos);RESULT=arreglo;:}
    | posiciones:pos {:RESULT=new ArrayList<String>();
        RESULT.add(pos);:} 
    ;

posiciones::= xpos:x {:RESULT=String.valueOf("x: "+x.toString());:}
    | ypos:y {:RESULT=String.valueOf("y: "+y.toString());:}
    | type:tipo {:RESULT=String.valueOf("tipo: "+tipo.toString());:}
    ;

xpos::=POSX DOSPUNTOS numero:x {:
    RESULT=x.toString();
:};

ypos::=POSY DOSPUNTOS numero:y {:
    RESULT=y.toString();    
:};

type::=TYPE DOSPUNTOS BRICK {: RESULT="BRICK"; :}
    | TYPE DOSPUNTOS HALL {:RESULT="HALL"; :}
    ;

    
numero::= ENTERO:num1 {:
            int num=Integer.valueOf(num1.toString());
            RESULT=num;
            :}  
    | COMILLAS operacion:num2 COMILLAS {:
            RESULT=num2.toString();
        :} 
    ;
operacion::= operacion:num MULTIPLICACION x:num2 {:RESULT=Double.parseDouble(num.toString())*Double.parseDouble(num2.toString());:}
    | operacion:num DIVISION x:num2 {:RESULT=Double.parseDouble(num.toString())/Double.parseDouble(num2.toString());:}
    | operacion:num SUMA x:num2 {:RESULT=Double.parseDouble(num.toString()) +Double.parseDouble(num2.toString());:}
	| operacion:num RESTA x:num2 {:RESULT=Double.parseDouble(num.toString())-Double.parseDouble(num2.toString());:}
	| x:num {:RESULT=num;:}
    | FLOOR PARENTESIS_A operacion:num3 PARENTESIS_C {:RESULT=Math.floor(Double.parseDouble(num3.toString()));:}
    | CEIL PARENTESIS_A operacion:num4 PARENTESIS_C {:RESULT=Math.ceil(Double.parseDouble(num4.toString()));:} 
	;

x ::= PARENTESIS_A operacion:num PARENTESIS_C {:RESULT=num;:}
    | ENTERO:entero {:RESULT=entero.toString();:}
	 | DECIMAL:decimal {:RESULT=Double.parseDouble(decimal.toString());:}
	;
